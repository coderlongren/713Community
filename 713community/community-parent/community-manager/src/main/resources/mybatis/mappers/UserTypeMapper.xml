<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->

<mapper namespace="com.community.manager.dao.UserTypeDao">

	<!--sql片段-->
	<sql id="tableName">user_type</sql>

	<!-- resultMap:id自定义，type为需要映射的实体JavaBean
	 		1、必须要有<id/>标签，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 		2、<result/>根据每个表的字段数量来定义，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 -->
	<resultMap id="userTypeResultMap" type="UserType">
		<id column="id" property="id"/>
		<result column="typeName" property="typeName"/>

	</resultMap>


	<!-- SQL的DML操作分别对应select、update、delete、insert 这几个标签，当使用这些标签时注意：
			1、id的值为对应dao类里的那个方法的方法名，如SysUserao里的List<SysUser> listAll()-则该select标签的id应为listAll
			2、统一给每一个mapper.xml定义resultMap映射，然后每一个查询的查询结果统一使用resultMap
			3、如果对应的查询方法有参数值，则要设置parameterType，其值为方法里对应参数的类型
	 -->
	<select id="listAll" resultMap="userTypeResultMap">
		select * from <include refid="tableName"/>
	</select>

	<delete id="deleteById" parameterType="java.lang.Long">
		DELETE FROM <include refid="tableName"/> WHERE id=#{id}
	</delete>

	<select id="getById" parameterType="java.lang.Long" resultMap="userTypeResultMap">
		SELECT * FROM <include refid="tableName" />WHERE id=#{id}
	</select>
	
	<insert id="insert" parameterType="UserType">
		insert into <include refid="tableName" />(typeName)
		values(#{typeName})
	</insert>

	<update id="update" parameterType="UserType">
		update <include refid="tableName"/>
		<set>
			<if test="typeName != null and typeName != ''">
				typeName = #{typeName},
			</if>
		</set>
		WHERE id=#{id}
	</update>

	<select id="listUserTypeWithSearch" resultMap="userTypeResultMap">
		SELECT * FROM user_type WHERE typeName like #{searchVal}
	</select>

</mapper>