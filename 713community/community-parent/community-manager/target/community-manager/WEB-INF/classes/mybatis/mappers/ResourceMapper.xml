<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->

<mapper namespace="com.community.manager.dao.ResourceDao">

	<!--sql片段-->
	<sql id="tableName">resource</sql>

	<!-- resultMap:id自定义，type为需要映射的实体JavaBean
	 		1、必须要有<id/>标签，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 		2、<result/>根据每个表的字段数量来定义，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 -->
	<!-- resultMap:id自定义，type为需要映射的实体JavaBean
         1、必须要有<id/>标签，其中column为数据库表对应的字段名，property对应为实体类的属性名
         2、<result/>根据每个表的字段数量来定义，其中column为数据库表对应的字段名，property对应为实体类的属性名
 -->
	<resultMap id="resourceResultMap" type="Resource">
		<id column="id" property="id"/>
		<result column="user_username" property="username"/>
		<result column="typename" property="name"/>
		<result column="resource_content" property="content"/>
		<result column="user_id" property="userId"/>
		<result column="type_id" property="typeId"/>
		<result column="author" property="author"/>
		<result column="release_time" property="releaseTime"/>
		<result column="browse_num" property="browseNum"/>
		<result column="down_num" property="downNum"/>
		<result column="title" property="title"/>
		<result column="show_flag" property="showFlag"/>
		<result column="create_time" property="createTime"/>
		<result column="update_time" property="updateTime"/>
	</resultMap>


	<resultMap id="resourceResultSearchMap" type="Resource">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="name" property="name"/>
		<result column="content" property="content"/>
		<result column="user_id" property="userId"/>
		<result column="type_id" property="typeId"/>
		<result column="author" property="author"/>
		<result column="release_time" property="releaseTime"/>
		<result column="browse_num" property="browseNum"/>
		<result column="down_num" property="downNum"/>
		<result column="title" property="title"/>
		<result column="show_flag" property="showFlag"/>
		<result column="create_time" property="createTime"/>
		<result column="update_time" property="updateTime"/>
	</resultMap>


	<!-- SQL的DML操作分别对应select、update、delete、insert 这几个标签，当使用这些标签时注意：
			1、id的值为对应dao类里的那个方法的方法名，如SysUserao里的List<SysUser> listAll()-则该select标签的id应为listAll
			2、统一给每一个mapper.xml定义resultMap映射，然后每一个查询的查询结果统一使用resultMap
			3、如果对应的查询方法有参数值，则要设置parameterType，其值为方法里对应参数的类型
	 -->
	<!--多表关联查询出资源的信息-->
	<select id="listAll" resultMap="resourceResultMap">
		select `user`.username user_username,resource_type.`name` typename,resource_info.content resource_content,resource.*
   		  from `user`,resource_type,resource_info,resource
		   where `user`.id=resource.user_id and resource_type.id=resource.type_id and resource_info.resource_id=resource.id
			ORDER BY(resource.update_time) DESC
	</select>

	<update id="updateResourceById">
		update <include refid="tableName"/> set show_flag=#{showFlag} where resource.id=#{resourceId}
	</update>

	<!--根据id删除资源记录-->
	<delete id="deleteById" parameterType="java.lang.Long">
		delete from <include refid="tableName"/> where id = #{id}
	</delete>

	<!--插入资源信息 并返回主键id  利用useGeneratedKeys="true" keyProperty="id"，适用于自增主键-->
	<insert id="insert" parameterType="com.community.manager.entity.Resource" useGeneratedKeys="true" keyProperty="id">
		insert into <include refid="tableName"/> (user_id,type_id,author,release_time,browse_num,down_num,title,show_flag,create_time,update_time)
		   values(#{userId},#{typeId},#{author},#{releaseTime},#{browseNum},#{downNum},#{title},#{showFlag},#{createTime},#{updateTime})
	</insert>
	<!--对资源信息进行模糊搜索  注意写法：info.${searchParam}-->
	<select id="listResourceWithSearch" resultMap="resourceResultSearchMap">
		select *
			from(select `user`.username username,resource_type.`name` name,resource_info.content content,resource.*
			 from `user`,resource_type,resource_info,resource
				 where `user`.id=resource.user_id and resource_type.id=resource.type_id and resource_info.resource_id=resource.id)
				info
   		where info.${searchParam} like #{searchKeywords}
	</select>
</mapper>