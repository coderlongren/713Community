<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->

<mapper namespace="com.community.manager.dao.ImageDao">

	<!--sql片段-->
	<sql id="tableName">image</sql>

	<!-- resultMap:id自定义，type为需要映射的实体JavaBean
	 		1、必须要有<id/>标签，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 		2、<result/>根据每个表的字段数量来定义，其中column为数据库表对应的字段名，property对应为实体类的属性名
	 -->
	<resultMap id="imageResultMap" type="Image">
		<id column="id" property="id"/>
		<result column="image_name" property="imageName"/>
		<result column="title" property="title"/>
		<result column="info" property="info"/>
		<result column="url" property="url"/>
		<result column="link_url" property="linkUrl"/>
		<result column="type_id" property="typeId"/>
		<result column="order_num" property="orderNum"/>
		<result column="status" property="status"/>
		<result column="create_time" property="createTime"/>
		<result column="update_time" property="updateTime"/>
		<!--以下是扩展字段-->
		<result column="type_name" property="typeName"/>
	</resultMap>


	<!-- SQL的DML操作分别对应select、update、delete、insert 这几个标签，当使用这些标签时注意：
			1、id的值为对应dao类里的那个方法的方法名，如SysUserao里的List<SysUser> listAll()-则该select标签的id应为listAll
			2、统一给每一个mapper.xml定义resultMap映射，然后每一个查询的查询结果统一使用resultMap
			3、如果对应的查询方法有参数值，则要设置parameterType，其值为方法里对应参数的类型
	 -->
	<select id="listAll" resultMap="imageResultMap">
		select i.*, it.type_name type_name
		from image i, image_type it
		where i.type_id = it.id
		order by i.order_num ASC
	</select>

	<select id="getById" parameterType="java.lang.Long" resultMap="imageResultMap">
		select * from <include refid="tableName"/>
		where id = #{id}
	</select>

	<select id="listImageByType" parameterType="java.lang.Long" resultMap="imageResultMap">
		select i.id, i.type_id, i.url, i.title
		from <include refid="tableName"/> i
		where i.type_id = #{typeId}
	</select>

	<select id="listBySearch" resultMap="imageResultMap">
		select info.*
		from (select it.type_name,i.*
			  from image i, image_type it
			  where i.type_id = it.id
			  ) info
		where info.${param} like #{value}
	</select>

	<select id="listByTypeIds" parameterType="java.util.List" resultMap="imageResultMap">
		select i.id, i.type_id, i.url, i.title, i.image_name, i.status, i.order_num, i.info, i.link_url
		from <include refid="tableName"/> i
		<where>
			<if test="list != null and list != ''">
				<foreach collection="list" open="and i.type_id in (" separator="," close=")" item="typeId">
					#{typeId}
				</foreach>
			</if>
		</where>
		order by i.order_num
	</select>

	<update id="update" parameterType="Image">
		update <include refid="tableName"/>
		<set>
			<if test="imageName != null and imageName != ''">
				image_name = #{imageName},
			</if>
			<if test="title != null and title != ''">
				title = #{title},
			</if>
			<if test="info != null and info != ''">
				info = #{info},
			</if>
			<if test="url != null and url != ''">
				url = #{url},
			</if>
			<if test="linkUrl != null and linkUrl != ''">
				link_url = #{linkUrl},
			</if>
			<if test="orderNum != null and orderNum != ''">
				order_num = #{orderNum},
			</if>
			<if test="status != null and status != ''">
				status = #{status},
			</if>
			<if test="createTime != null and createTime != ''">
				create_time = #{createTime},
			</if>
			<if test="updateTime != null and updateTime != ''">
				update_time = #{updateTime},
			</if>
		</set>
		where id = #{id}
	</update>

	<insert id="insert" parameterType="Image" keyProperty="id" useGeneratedKeys="true">
		insert into
		<include refid="tableName"/>
		(image_name, title, info, url, link_url, type_id, order_num, status, create_time, update_time)
		values(#{imageName}, #{title}, #{info}, #{url}, #{linkUrl}, #{typeId}, #{orderNum}, #{status}, #{createTime}, #{updateTime})
	</insert>

	<delete id="deleteById" parameterType="java.lang.Long">
		delete from <include refid="tableName"/>
		where id = #{id}
	</delete>
</mapper>